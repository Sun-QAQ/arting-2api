项目 'arting-2api' 的结构树:
📂 arting-2api/
    📄 .env
    📄 Dockerfile
    📄 docker-compose.yml
    📄 main.py
    📄 nginx.conf
    📄 requirements.txt
    📂 app/
        📂 core/
            📄 __init__.py
            📄 config.py
        📂 providers/
            📄 __init__.py
            📄 arting_provider.py
            📄 base_provider.py
        📂 utils/
            📄 sse_utils.py
    📂 static/
        📄 index.html
        📄 script.js
        📄 style.css
================================================================================

--- 文件路径: .env ---

# [自动填充] arting-2api 生产环境配置
API_MASTER_KEY=1
NGINX_PORT=8090
ARTING_AUTH_TOKEN="d1e493d8-b7f8-4dc3-a34c-1a31d346e238"


--- 文件路径: Dockerfile ---

# Dockerfile
# ====================================================================
# Dockerfile for arting-2api (v1.0)
# ====================================================================

FROM python:3.10-slim

# 设置环境变量
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
WORKDIR /app

# 安装 Python 依赖
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# 复制应用代码
COPY . .

# 创建并切换到非 root 用户
RUN useradd --create-home appuser && \
    chown -R appuser:appuser /app
USER appuser

# 暴露端口并启动
EXPOSE 8000
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"]


--- 文件路径: docker-compose.yml ---

# docker-compose.yml
services:
  nginx:
    image: nginx:latest
    container_name: arting-2api-nginx
    restart: always
    ports:
      - "${NGINX_PORT:-8090}:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    networks:
      - arting-net

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: arting-2api-app
    restart: unless-stopped
    env_file:
      - .env
    networks:
      - arting-net

networks:
  arting-net:
    driver: bridge


--- 文件路径: main.py ---

# main.py (修正版)
import sys
import time # <--- 修正：导入 time 模块
import uuid # <--- 修正：导入 uuid 模块
from contextlib import asynccontextmanager
from typing import Optional

from fastapi import FastAPI, Request, HTTPException, Depends, Header
from fastapi.responses import JSONResponse, HTMLResponse
from fastapi.staticfiles import StaticFiles
from loguru import logger

from app.core.config import settings
from app.providers.arting_provider import ArtingProvider

# --- 配置 Loguru ---
logger.remove()
logger.add(
    sys.stdout,
    level="INFO",
    format="<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | "
           "<level>{level: <8}</level> | "
           "<cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
    colorize=True
)

# --- 全局 Provider 实例 ---
provider = ArtingProvider()

@asynccontextmanager
async def lifespan(app: FastAPI):
    logger.info(f"应用启动中... {settings.APP_NAME} v{settings.APP_VERSION_MULTI_INTERFACE}")
    logger.info("服务已进入 'Cloudscraper' 模式，将自动处理潜在的 Cloudflare 挑战。")
    logger.info(f"API 服务将在 http://localhost:{settings.NGINX_PORT} 上可用")
    logger.info(f"Web UI 测试界面已启用，请访问 http://localhost:{settings.NGINX_PORT}/")
    yield
    logger.info("应用关闭。")

app = FastAPI(
    title=settings.APP_NAME,
    version=settings.APP_VERSION_MULTI_INTERFACE,
    description=settings.DESCRIPTION_MULTI_INTERFACE,
    lifespan=lifespan
)

# --- 挂载静态文件目录 ---
app.mount("/static", StaticFiles(directory="static"), name="static")

# --- 安全依赖 ---
async def verify_api_key(authorization: Optional[str] = Header(None)):
    if settings.API_MASTER_KEY and settings.API_MASTER_KEY != "1":
        if not authorization or "bearer" not in authorization.lower():
            raise HTTPException(status_code=401, detail="需要 Bearer Token 认证。")
        token = authorization.split(" ")[-1]
        if token != settings.API_MASTER_KEY:
            raise HTTPException(status_code=403, detail="无效的 API Key。")

# --- API 路由 ---

# 1. OpenAI 原生图像接口
@app.post("/v1/images/generations", dependencies=[Depends(verify_api_key)])
async def image_generations(request: Request):
    try:
        request_data = await request.json()
        image_urls = await provider.generate_image_urls(request_data)
        return JSONResponse(content={
            "created": int(time.time()), # <--- 此处需要 time 模块
            "data": [{"url": url} for url in image_urls]
        })
    except Exception as e:
        logger.error(f"处理 /v1/images/generations 请求时发生顶层错误: {e}", exc_info=True)
        if isinstance(e, HTTPException):
            raise e
        raise HTTPException(status_code=500, detail=f"内部服务器错误: {str(e)}")

# 2. 聊天客户端适配接口
@app.post("/v1/chat/completions", dependencies=[Depends(verify_api_key)])
async def chat_completions(request: Request):
    try:
        request_data = await request.json()
        
        messages = request_data.get("messages", [])
        last_user_message = next((m['content'] for m in reversed(messages) if m.get('role') == 'user'), None)
        if not last_user_message:
            raise HTTPException(status_code=400, detail="在 'messages' 中未找到用户消息。")

        image_request_data = {"prompt": last_user_message, "n": 1}
        
        logger.info(f"通过聊天接口适配图像生成, prompt: '{last_user_message[:50]}...'")
        image_urls = await provider.generate_image_urls(image_request_data)

        if not image_urls:
            raise HTTPException(status_code=502, detail="从上游服务生成图像失败。")
            
        response_content = f"![]({image_urls[0]})"
        
        chat_response = {
            "id": f"chatcmpl-{uuid.uuid4()}", # <--- 此处需要 uuid 模块
            "object": "chat.completion",
            "created": int(time.time()), # <--- 此处需要 time 模块
            "model": request_data.get("model", "arting-ai-pro"),
            "choices": [{"index": 0, "message": {"role": "assistant", "content": response_content}, "finish_reason": "stop"}],
            "usage": {"prompt_tokens": 0, "completion_tokens": 0, "total_tokens": 0}
        }
        return JSONResponse(content=chat_response)

    except Exception as e:
        logger.error(f"处理 /v1/chat/completions 请求时发生顶层错误: {e}", exc_info=True)
        if isinstance(e, HTTPException):
            raise e
        raise HTTPException(status_code=500, detail=f"内部服务器错误: {str(e)}")

# 3. Stable Diffusion WebUI 适配接口
@app.post("/sdapi/v1/txt2img", dependencies=[Depends(verify_api_key)])
async def sd_api_txt2img(request: Request):
    try:
        sd_request_data = await request.json()
        logger.info("接收到 SD WebUI API 请求...")
        
        image_request_data = provider.map_sd_to_arting_request(sd_request_data)
        
        image_urls = await provider.generate_image_urls(image_request_data)
        
        b64_images = await provider.fetch_images_as_base64(image_urls)
        
        sd_response = {
            "images": b64_images,
            "parameters": sd_request_data,
            "info": ""
        }
        return JSONResponse(content=sd_response)

    except Exception as e:
        logger.error(f"处理 /sdapi/v1/txt2img 请求时发生顶层错误: {e}", exc_info=True)
        if isinstance(e, HTTPException):
            raise e
        raise HTTPException(status_code=500, detail=f"内部服务器错误: {str(e)}")

@app.get("/v1/models", dependencies=[Depends(verify_api_key)])
async def list_models():
    model_data = await provider.get_models()
    return JSONResponse(content=model_data)

@app.get("/", response_class=HTMLResponse, include_in_schema=False)
async def serve_ui():
    try:
        with open("static/index.html", "r", encoding="utf-8") as f:
            return HTMLResponse(content=f.read())
    except FileNotFoundError:
        raise HTTPException(status_code=404, detail="UI 文件 (static/index.html) 未找到。")


--- 文件路径: nginx.conf ---

# nginx.conf
worker_processes auto;

events {
    worker_connections 1024;
}

http {
    upstream arting_backend {
        ip_hash;
        server app:8000;
    }

    server {
        listen 80;
        server_name localhost;

        client_max_body_size 10M;

        location / {
            proxy_pass http://arting_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_buffering off;
            proxy_cache off;
            proxy_set_header Connection '';
            proxy_http_version 1.1;
            chunked_transfer_encoding off;
        }
    }
}


--- 文件路径: requirements.txt ---

# requirements.txt
fastapi
uvicorn[standard]
pydantic-settings
python-dotenv
cloudscraper
aiohttp
asyncio
loguru


--- 文件路径: app\core\__init__.py ---



--- 文件路径: app\core\config.py ---

# app/core/config.py
from pydantic_settings import BaseSettings, SettingsConfigDict
from typing import Optional, List, Dict, Any

class Settings(BaseSettings):
    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding='utf-8',
        extra="ignore"
    )

    APP_NAME: str = "arting-2api"
    APP_VERSION_MULTI_INTERFACE: str = "2.0.0"
    DESCRIPTION_MULTI_INTERFACE: str = "一个将 arting.ai 转换为兼容 OpenAI, SD WebUI 等多种格式 API 的高性能代理。"

    API_MASTER_KEY: Optional[str] = "1"
    ARTING_AUTH_TOKEN: Optional[str] = None
    NGINX_PORT: int = 8090

    API_REQUEST_TIMEOUT: int = 300
    POLLING_INTERVAL: int = 2
    POLLING_TIMEOUT: int = 240

    KNOWN_MODELS: List[Dict[str, str]] = [
        {"id": "oneFORALLAnime", "name": "One For All Anime"},
        {"id": "oneFORALLReality_vPony", "name": "One For All Reality (Pony)"},
    ]

    KNOWN_LORAS: Dict[str, str] = {
        "add_detail": "Detail Tweaker", "Selene": "Selene", "SeleneTer": "SeleneTer",
        "COMMIX": "COMMIX", "COMMIX_r1": "COMMIX_r1", "Sv5-10": "Silver Wolf / Honkai: Star Rail",
        "StarRail_Kafka_AP_v4": "Kafka_Honkai Star Rail", "asamiya_athena": "Asamiya Athena",
        "purah-nvwls-v3-final": "Purah", "sailor_venus_v2": "sailor_venus",
        "lucy_offset": "Lucy (Cyberpunk Edgerunners)", "makima_offset": "makima",
        "keqing_lion_optimizer_dim64_loraModel_5e-3noise_token1_4-3-2023": "keqing",
        "one_last_misaka": "Misaka Mikoto (Toaru series)", "Rem_ReZero_v1_1": "rem",
        "tifa-nvwls-v2": "Tifa Lockhart", "Genshin_Kirara_AP_v3": "Kirara_Genshin",
        "CHP_0.1v": "PONY & ANIMAGINE", "aidmaMidjourneyV6.1-v0.1": "Midjourney V6.1",
        "ponyv4_noob1_2_adamW-000017": "Pony: People's Works", "detailed_notrigger": "extremely detailed",
        "kachina": "kachina (genshin impact)", "ECuthDS3": "Elisha Cuthbert",
        "Expressive_H-000001": "ExpressiveH", "Char-Genshin-Shenhe-V1": "Shenhe",
        "sailormoon-pdxl-nvls-v1": "Sailor Moon", "yui_kamishiro_Pony_v01": "神代ゆい：獣神ライガー",
        "hentai_anime_style_pony_v2": "Anime,hentai", "BishopNew_Illustrious": "Bishop (Maplestory)",
        "MixedLatina_LORA": "Hot Latina", "latinaDollLikeness": "latinaDollLikeness",
        "MomoAyase": "Momo Ayase", "the_bt-10": "the batman 2004 style",
        "EtherPDXLStyleXL": "Ether PDXL | Style for NoobAI 1.0", "M_Pixel": "M_Pixel"
    }

settings = Settings()


--- 文件路径: app\providers\__init__.py ---



--- 文件路径: app\providers\arting_provider.py ---

# app/providers/arting_provider.py
import time
import asyncio
import base64
import json
from typing import Dict, Any, Optional, List, Tuple

import cloudscraper
import aiohttp
from fastapi import HTTPException
from loguru import logger # 导入 loguru

from app.core.config import settings

class ArtingProvider:
    BASE_URL = "https://api.arting.ai/api/cg/text-to-image"

    def __init__(self):
        self.scraper = cloudscraper.create_scraper()

    def _prepare_headers(self) -> Dict[str, str]:
        if not settings.ARTING_AUTH_TOKEN:
            raise ValueError("ARTING_AUTH_TOKEN 未在 .env 文件中配置。")
        return {
            "Accept": "application/json, text/plain, */*",
            "Accept-Language": "zh-CN,zh;q=0.9,en;q=0.8",
            "Authorization": settings.ARTING_AUTH_TOKEN,
            "Content-Type": "application/json",
            "Origin": "https://arting.ai",
            "Referer": "https://arting.ai/",
            "sec-ch-ua": '"Google Chrome";v="141", "Not?A_Brand";v="8", "Chromium";v="141"',
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": '"Windows"',
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36",
        }

    def _parse_size(self, size_str: Optional[str]) -> Tuple[int, int]:
        if size_str and 'x' in size_str:
            try:
                width, height = map(int, size_str.split('x'))
                return width, height
            except ValueError:
                logger.warning(f"无效的尺寸格式: '{size_str}', 使用默认值 512x768。")
        return 512, 768

    async def _start_task(self, payload: Dict[str, Any]) -> str:
        url = f"{self.BASE_URL}/create"
        headers = self._prepare_headers()
        
        logger.info("==================== [REQUEST TO ARING /create] ====================")
        logger.info(f"URL: POST {url}")
        logger.info(f"Headers: {json.dumps(headers, indent=2)}")
        logger.info(f"Payload: {json.dumps(payload, indent=2, ensure_ascii=False)}")
        logger.info("====================================================================")
        
        loop = asyncio.get_running_loop()
        response = await loop.run_in_executor(
            None, lambda: self.scraper.post(url, headers=headers, json=payload, timeout=settings.API_REQUEST_TIMEOUT)
        )
        
        try:
            response.raise_for_status()
            data = response.json()
            
            if data.get("code") != 100000 or "data" not in data or "request_id" not in data["data"]:
                raise Exception(f"提交任务失败: {data.get('message', '未知错误')}")
            
            request_id = data["data"]["request_id"]
            logger.info(f"任务提交成功, Request ID: {request_id}")
            return request_id

        except json.JSONDecodeError:
            logger.error("!!!!!!!!!!!! [UPSTREAM ERROR - /create] !!!!!!!!!!!!")
            logger.error("上游返回的不是有效的 JSON。很可能触发了 Cloudflare 防护。")
            logger.error(f"Status Code: {response.status_code}")
            logger.error(f"Response Body (HTML):\n{response.text}")
            logger.error("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
            raise Exception("上游 API 响应格式错误，可能是 Cloudflare 拦截。")
        except Exception as e:
            logger.error(f"向 /create 发送请求时发生未知错误: {e}", exc_info=True)
            raise

    async def _poll_for_result(self, request_id: str) -> List[str]:
        start_time = time.time()
        url = f"{self.BASE_URL}/get"
        headers = self._prepare_headers()
        payload = {"request_id": request_id}

        while time.time() - start_time < settings.POLLING_TIMEOUT:
            await asyncio.sleep(settings.POLLING_INTERVAL)
            
            logger.debug(f"轮询任务状态... Request ID: {request_id}")
            loop = asyncio.get_running_loop()
            response = await loop.run_in_executor(
                None, lambda: self.scraper.post(url, headers=headers, json=payload, timeout=settings.API_REQUEST_TIMEOUT)
            )
            
            try:
                response.raise_for_status()
                data = response.json()

                if data.get("code") != 100000:
                    logger.warning(f"轮询状态异常: {data.get('message')}")
                    continue

                result_data = data.get("data", {})
                output_urls = result_data.get("output")

                if output_urls:
                    # 修复: 使用 logger.info 替代 logger.success
                    logger.info(f"任务完成，获取到 {len(output_urls)} 个结果。")
                    return output_urls
                
                logger.debug(f"任务仍在处理中... Status: {result_data.get('status')}")

            except json.JSONDecodeError:
                logger.error("!!!!!!!!!!!! [UPSTREAM ERROR - /get] !!!!!!!!!!!!")
                logger.error("轮询时上游返回的不是有效的 JSON。")
                logger.error(f"Status Code: {response.status_code}")
                logger.error(f"Response Body (HTML):\n{response.text}")
                logger.error("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                continue
            except Exception as e:
                # 修复: 移除导致崩溃的 logger.success 调用
                logger.error(f"轮询时发生未知错误: {e}", exc_info=True)
                continue

        raise Exception("轮询任务状态超时。")

    async def generate_image_urls(self, request_data: Dict[str, Any]) -> List[str]:
        prompt = request_data.get("prompt")
        if not prompt:
            raise HTTPException(status_code=400, detail="参数 'prompt' 不能为空。")
        width, height = self._parse_size(request_data.get("size"))
        payload = {
            "prompt": prompt,
            "model_id": request_data.get("model", "oneFORALLAnime"),
            "lora_ids": request_data.get("lora_ids", ""),
            "lora_weight": str(request_data.get("lora_weight", 0.7)),
            "samples": request_data.get("n", 1),
            "height": height,
            "width": width,
            "guidance": request_data.get("guidance", 7),
            "sampler": request_data.get("sampler", "Euler a"),
            "steps": request_data.get("steps", 25),
            "seed": request_data.get("seed", -1),
            "clip_skip": request_data.get("clip_skip", 2),
            "negative_prompt": request_data.get("negative_prompt", ""),
            "is_nsfw": request_data.get("is_nsfw", False)
        }
        try:
            request_id = await self._start_task(payload)
            return await self._poll_for_result(request_id)
        except Exception as e:
            logger.error(f"处理图像任务时出错: {e}", exc_info=True)
            raise HTTPException(status_code=502, detail=f"上游服务错误: {str(e)}")

    def map_sd_to_arting_request(self, sd_request: Dict[str, Any]) -> Dict[str, Any]:
        return {
            "prompt": sd_request.get("prompt", ""),
            "negative_prompt": sd_request.get("negative_prompt", ""),
            "model": "oneFORALLReality_vPony",
            "n": sd_request.get("batch_size", 1),
            "size": f"{sd_request.get('width', 512)}x{sd_request.get('height', 768)}",
            "sampler": sd_request.get("sampler_name", sd_request.get("sampler_index", "Euler a")),
            "steps": sd_request.get("steps", 25),
            "guidance": sd_request.get("cfg_scale", 7),
            "seed": sd_request.get("seed", -1),
            "is_nsfw": True
        }

    async def fetch_images_as_base64(self, urls: List[str]) -> List[str]:
        async with aiohttp.ClientSession() as session:
            tasks = [self._fetch_single_image(session, url) for url in urls]
            results = await asyncio.gather(*tasks)
            return [b64 for b64 in results if b64]

    async def _fetch_single_image(self, session: aiohttp.ClientSession, url: str) -> Optional[str]:
        try:
            async with session.get(url) as response:
                response.raise_for_status()
                image_bytes = await response.read()
                return base64.b64encode(image_bytes).decode('utf-8')
        except Exception as e:
            logger.error(f"下载图片失败: {url}, 错误: {e}")
            return None

    async def get_models(self) -> Dict[str, Any]:
        return {
            "base_models": settings.KNOWN_MODELS,
            "lora_models": settings.KNOWN_LORAS
        }


--- 文件路径: app\providers\base_provider.py ---

from abc import ABC, abstractmethod
from typing import Dict, Any
from fastapi.responses import StreamingResponse, JSONResponse

class BaseProvider(ABC):
    @abstractmethod
    async def chat_completion(
        self,
        request_data: Dict[str, Any]
    ) -> StreamingResponse:
        pass

    @abstractmethod
    async def get_models(self) -> JSONResponse:
        pass


--- 文件路径: app\utils\sse_utils.py ---

import json
import time
from typing import Dict, Any, Optional

DONE_CHUNK = b"data: [DONE]\n\n"

def create_sse_data(data: Dict[str, Any]) -> bytes:
    """将字典数据格式化为 SSE 事件字符串。"""
    return f"data: {json.dumps(data, ensure_ascii=False)}\n\n".encode('utf-8')

def create_chat_completion_chunk(
    request_id: str,
    model: str,
    content: str,
    finish_reason: Optional[str] = None
) -> Dict[str, Any]:
    """创建一个与 OpenAI 兼容的聊天补全流式块。"""
    return {
        "id": request_id,
        "object": "chat.completion.chunk",
        "created": int(time.time()),
        "model": model,
        "choices": [
            {
                "index": 0,
                "delta": {"content": content},
                "finish_reason": finish_reason
            }
        ]
    }


--- 文件路径: static\index.html ---

<!-- static/index.html -->
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Arting-2API 测试面板</title>
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <div class="container">
        <div class="sidebar">
            <div class="header">
                <h2>Arting-2API</h2>
                <p>v1.0</p>
            </div>

            <div class="form-group">
                <label for="api-key">API Key</label>
                <input type="password" id="api-key" placeholder="请输入您的 API Key" value="1">
            </div>

            <div class="form-group">
                <label for="model-select">基础模型 (Base Model)</label>
                <select id="model-select"></select>
            </div>
            
            <div class="form-group">
                <label for="lora-select">LoRA 模型 (可多选)</label>
                <select id="lora-select" multiple="multiple"></select>
            </div>

            <div class="form-group">
                <label for="prompt-input">提示词 (Prompt)</label>
                <textarea id="prompt-input" rows="4" placeholder="输入您的图像描述..."></textarea>
            </div>

            <div class="form-group">
                <label for="negative-prompt-input">负向提示词 (Negative Prompt)</label>
                <textarea id="negative-prompt-input" rows="3" placeholder="不想在图中看到的内容..."></textarea>
            </div>

            <div class="form-group">
                <label for="sampler-select">采样器 (Sampler)</label>
                <select id="sampler-select">
                    <option>Euler a</option>
                    <option>Euler</option>
                    <option>LMS</option>
                    <option>Heun</option>
                    <option>DPM2</option>
                    <option>DPM2 a</option>
                    <option>DPM++ 2S a</option>
                    <option>DPM++ 2M</option>
                    <option>DPM++ SDE</option>
                    <option>DPM fast</option>
                    <option>DPM adaptive</option>
                    <option>LMS Karras</option>
                    <option>DPM2 Karras</option>
                    <option>DPM2 a Karras</option>
                    <option>DPM++ 2S a Karras</option>
                    <option>DPM++ 2M Karras</option>
                    <option>DPM++ SDE Karras</option>
                    <option>DDIM</option>
                </select>
            </div>

            <div class="form-group slider-group">
                <div class="slider-label"><label>尺寸 (Ratio)</label></div>
                <div class="button-group" id="ratio-group">
                    <button data-size="512x768" class="active">2:3</button>
                    <button data-size="768x512">3:2</button>
                    <button data-size="512x1024">1:2</button>
                    <button data-size="1024x512">2:1</button>
                    <button data-size="768x768">1:1</button>
                </div>
            </div>

            <div class="form-group slider-group">
                <div class="slider-label">
                    <label for="steps-slider">步数 (Steps)</label>
                    <span id="steps-value">25</span>
                </div>
                <input type="range" id="steps-slider" min="10" max="100" step="1" value="25">
            </div>

            <div class="form-group slider-group">
                <div class="slider-label">
                    <label for="guidance-slider">CFG Scale</label>
                    <span id="guidance-value">7.0</span>
                </div>
                <input type="range" id="guidance-slider" min="1" max="20" step="0.1" value="7">
            </div>
            
            <div class="form-group slider-group">
                <div class="slider-label">
                    <label for="lora-weight-slider">LoRA Weight</label>
                    <span id="lora-weight-value">0.7</span>
                </div>
                <input type="range" id="lora-weight-slider" min="0" max="2" step="0.05" value="0.7">
            </div>

            <div class="form-group slider-group">
                <div class="slider-label">
                    <label for="count-slider">生成数量 (Number)</label>
                    <span id="count-value">1</span>
                </div>
                <input type="range" id="count-slider" min="1" max="4" step="1" value="1">
            </div>

            <div class="form-group">
                <label for="seed-input">种子 (Seed)</label>
                <input type="number" id="seed-input" value="-1">
            </div>

            <div class="form-group checkbox-group">
                <input type="checkbox" id="nsfw-toggle">
                <label for="nsfw-toggle">允许 NSFW 内容</label>
            </div>

            <button id="generate-btn">
                <span>生成图像</span>
            </button>
        </div>
        <div class="main-content">
            <div id="result-panel">
                <div id="placeholder" class="placeholder">
                    <p>请在左侧配置参数并开始生成</p>
                </div>
                <div id="spinner" class="spinner hidden"></div>
                <div id="error-message" class="error hidden"></div>
                <div id="image-grid"></div>
            </div>
        </div>
    </div>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="/static/script.js"></script>
</body>
</html>

--- 文件路径: static\script.js ---

// static/script.js
$(document).ready(function() {
    // DOM Elements
    const apiKeyInput = $('#api-key');
    const modelSelect = $('#model-select');
    const loraSelect = $('#lora-select');
    const promptInput = $('#prompt-input');
    const negativePromptInput = $('#negative-prompt-input');
    const samplerSelect = $('#sampler-select');
    const ratioGroup = $('#ratio-group');
    const stepsSlider = $('#steps-slider');
    const stepsValue = $('#steps-value');
    const guidanceSlider = $('#guidance-slider');
    const guidanceValue = $('#guidance-value');
    const loraWeightSlider = $('#lora-weight-slider');
    const loraWeightValue = $('#lora-weight-value');
    const countSlider = $('#count-slider');
    const countValue = $('#count-value');
    const seedInput = $('#seed-input');
    const nsfwToggle = $('#nsfw-toggle');
    const generateBtn = $('#generate-btn');
    const imageGrid = $('#image-grid');
    const spinner = $('#spinner');
    const errorMessage = $('#error-message');
    const placeholder = $('#placeholder');

    // Initialize Select2
    loraSelect.select2({
        placeholder: "选择 LoRA 模型...",
        allowClear: true
    });

    // --- Functions ---
    async function populateModels() {
        modelSelect.prop('disabled', true);
        loraSelect.prop('disabled', true);
        generateBtn.prop('disabled', true);
        hideError();

        const apiKey = apiKeyInput.val().trim();
        if (!apiKey) {
            modelSelect.html('<option>请输入API Key</option>');
            return;
        }

        modelSelect.html('<option>正在加载模型...</option>');

        try {
            const response = await fetch('/v1/models', {
                headers: { 'Authorization': `Bearer ${apiKey}` }
            });
            const result = await response.json();
            if (!response.ok) throw new Error(result.detail || '获取模型列表失败。');

            // Populate Base Models
            modelSelect.empty();
            result.base_models.forEach(model => {
                modelSelect.append(new Option(model.name, model.id));
            });

            // Populate LoRA Models
            loraSelect.empty();
            for (const [id, name] of Object.entries(result.lora_models)) {
                loraSelect.append(new Option(name, id));
            }
            loraSelect.trigger('change'); // Notify Select2

            modelSelect.prop('disabled', false);
            loraSelect.prop('disabled', false);
            generateBtn.prop('disabled', false);

        } catch (error) {
            showError(`模型加载失败: ${error.message}. 请检查您的 API Key.`);
            modelSelect.html('<option>加载失败</option>');
        }
    }

    async function handleGenerate() {
        const apiKey = apiKeyInput.val().trim();
        if (!apiKey || !promptInput.val().trim()) {
            showError("请确保 API Key 和提示词都已填写。");
            return;
        }

        setLoading(true);

        const payload = {
            model: modelSelect.val(),
            prompt: promptInput.val().trim(),
            negative_prompt: negativePromptInput.val().trim(),
            lora_ids: (loraSelect.val() || []).join(','),
            lora_weight: parseFloat(loraWeightSlider.val()),
            n: parseInt(countSlider.val(), 10),
            size: ratioGroup.find('.active').data('size'),
            sampler: samplerSelect.val(),
            steps: parseInt(stepsSlider.val(), 10),
            guidance: parseFloat(guidanceSlider.val()),
            seed: parseInt(seedInput.val(), 10),
            is_nsfw: nsfwToggle.is(':checked')
        };

        try {
            const response = await fetch('/v1/images/generations', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                },
                body: JSON.stringify(payload)
            });

            const result = await response.json();
            if (!response.ok) throw new Error(result.detail || '生成失败，未知错误。');

            if (result.data && result.data.length > 0) {
                displayImages(result.data);
            } else {
                throw new Error('API 返回了成功状态，但没有图片数据。');
            }
        } catch (error) {
            showError(error.message);
        } finally {
            setLoading(false);
        }
    }

    function displayImages(data) {
        imageGrid.empty();
        data.forEach(item => {
            if (item.url) {
                const imgContainer = $('<div>').addClass('image-container');
                const img = $('<img>').attr('src', item.url).attr('alt', 'Generated Image');
                imgContainer.append(img);
                imageGrid.append(imgContainer);
            }
        });
    }

    function setLoading(isLoading) {
        generateBtn.prop('disabled', isLoading);
        spinner.toggleClass('hidden', !isLoading);
        placeholder.toggleClass('hidden', isLoading || imageGrid.children().length > 0);
        if (isLoading) {
            imageGrid.empty();
            hideError();
        }
    }

    function showError(message) {
        errorMessage.text(message).removeClass('hidden');
        imageGrid.empty();
        placeholder.addClass('hidden');
    }

    function hideError() {
        errorMessage.addClass('hidden');
    }

    // --- Event Listeners ---
    apiKeyInput.on('change', populateModels);
    generateBtn.on('click', handleGenerate);

    stepsSlider.on('input', () => stepsValue.text(stepsSlider.val()));
    guidanceSlider.on('input', () => guidanceValue.text(parseFloat(guidanceSlider.val()).toFixed(1)));
    loraWeightSlider.on('input', () => loraWeightValue.text(parseFloat(loraWeightSlider.val()).toFixed(2)));
    countSlider.on('input', () => countValue.text(countSlider.val()));

    ratioGroup.on('click', 'button', function() {
        ratioGroup.find('.active').removeClass('active');
        $(this).addClass('active');
    });

    // --- Initial Load ---
    populateModels();
});


--- 文件路径: static\style.css ---

/* static/style.css */
:root {
    --bg-color: #f0f2f5;
    --sidebar-bg: #ffffff;
    --main-bg: #f7f7f8;
    --border-color: #e5e7eb;
    --text-color: #111827;
    --text-secondary: #6b7280;
    --primary-color: #4f46e5;
    --primary-hover: #4338ca;
    --input-bg: #f9fafb;
}
* { box-sizing: border-box; }
body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    margin: 0;
    background-color: var(--bg-color);
    color: var(--text-color);
    font-size: 14px;
    display: flex;
    height: 100vh;
    overflow: hidden;
}
.container { display: flex; width: 100%; height: 100%; }
.sidebar {
    width: 380px;
    flex-shrink: 0;
    background-color: var(--sidebar-bg);
    border-right: 1px solid var(--border-color);
    padding: 24px;
    display: flex;
    flex-direction: column;
    overflow-y: auto;
}
.header { padding-bottom: 16px; margin-bottom: 24px; border-bottom: 1px solid var(--border-color); }
.header h2 { margin: 0; }
.header p { margin: 4px 0 0; color: var(--text-secondary); }
.main-content { flex-grow: 1; background-color: var(--main-bg); padding: 24px; overflow-y: auto; }
#result-panel { width: 100%; height: 100%; display: flex; flex-direction: column; align-items: center; justify-content: center; }
.form-group { margin-bottom: 16px; }
label { display: block; font-weight: 500; margin-bottom: 8px; }
input[type="password"], input[type="number"], textarea, select {
    width: 100%;
    padding: 10px 12px;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    font-size: 14px;
    background-color: var(--input-bg);
    transition: border-color 0.2s;
}
textarea { resize: vertical; }
input:focus, textarea:focus, select:focus { outline: none; border-color: var(--primary-color); box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.2); }
.select2-container .select2-selection--multiple { border: 1px solid var(--border-color); padding: 5px; border-radius: 6px; }
.slider-group .slider-label { display: flex; justify-content: space-between; align-items: center; }
.slider-group .slider-label span { font-weight: 600; color: var(--primary-color); }
input[type="range"] { -webkit-appearance: none; width: 100%; height: 6px; background: #ddd; border-radius: 5px; outline: none; margin-top: 8px; }
input[type="range"]::-webkit-slider-thumb { -webkit-appearance: none; appearance: none; width: 18px; height: 18px; background: var(--primary-color); cursor: pointer; border-radius: 50%; }
input[type="range"]::-moz-range-thumb { width: 18px; height: 18px; background: var(--primary-color); cursor: pointer; border-radius: 50%; }
.button-group { display: flex; gap: 8px; }
.button-group button { flex-grow: 1; padding: 8px; border: 1px solid var(--border-color); background: var(--input-bg); border-radius: 6px; cursor: pointer; }
.button-group button.active { background: var(--primary-color); color: white; border-color: var(--primary-color); }
.checkbox-group { display: flex; align-items: center; gap: 8px; }
#generate-btn { width: 100%; padding: 12px; background-color: var(--primary-color); color: white; border: none; border-radius: 6px; font-size: 16px; font-weight: 500; cursor: pointer; transition: background-color 0.2s; margin-top: auto; }
#generate-btn:hover { background-color: var(--primary-hover); }
#generate-btn:disabled { background-color: #9ca3af; cursor: not-allowed; }
.placeholder { text-align: center; color: var(--text-secondary); }
#image-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(256px, 1fr)); gap: 16px; width: 100%; }
.image-container { position: relative; overflow: hidden; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); }
.image-container img { width: 100%; height: 100%; object-fit: cover; display: block; }
.hidden { display: none; }
.spinner { border: 5px solid rgba(0, 0, 0, 0.1); width: 50px; height: 50px; border-radius: 50%; border-left-color: var(--primary-color); animation: spin 1s ease infinite; }
@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
.error { color: #b91c1c; background-color: #fee2e2; border: 1px solid #fca5a5; padding: 15px; border-radius: 6px; text-align: center; max-width: 600px; }



